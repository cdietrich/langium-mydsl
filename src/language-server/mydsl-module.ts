import { createDefaultModule, DefaultModuleContext, inject, LangiumServices, Module, PartialLangiumServices } from 'langium';
import { MydslGeneratedModule } from './generated/module';
import { MyDslCodeActionProvider } from './mydsl-code-actions';
import { MydslValidationRegistry, MydslValidator } from './mydsl-validator';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type MydslAddedServices = {
    validation: {
        MydslValidator: MydslValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type MydslServices = LangiumServices & MydslAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const MydslModule: Module<MydslServices, PartialLangiumServices & MydslAddedServices> = {
    validation: {
        ValidationRegistry: (injector) => new MydslValidationRegistry(injector),
        MydslValidator: () => new MydslValidator(),
    },
    lsp: {
        CodeActionProvider: () => new MyDslCodeActionProvider()
    }

};

/**
 * Inject the full set of language services by merging three modules:
 *  - Langium default services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 */
export function createMydslServices(context?: DefaultModuleContext): MydslServices {
    return inject(
        createDefaultModule(context),
        MydslGeneratedModule,
        MydslModule
    );
}
